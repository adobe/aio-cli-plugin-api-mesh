/*
Copyright 2021 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

const mockMetadataFixture = require('../__fixtures__/connectors-metadata.json');
const mockSourceTest01v1Fixture = require('../__fixtures__/0.0.1-test-01.json');
const mockSourceTest01v2Fixture = require('../__fixtures__/0.0.1-test-02.json');
const mockSourceTest02v1Fixture = require('../__fixtures__/0.0.2-test-01.json');
const Adapter = require("connector-registry-storage-adapter");
const { promptMultiselect, promptSelect, promptConfirm } = require('../../../../helpers');
const mockSources = {
    "0.0.1-test-01": mockSourceTest01v1Fixture,
    "0.0.1-test-01": mockSourceTest01v2Fixture,
    "0.0.2-test-01": mockSourceTest02v1Fixture,
}
jest.mock('@adobe/aio-lib-env');
jest.mock('@adobe/aio-lib-core-config');
// jest.mock('@adobe/aio-lib-env');
// jest.mock('@adobe/aio-cli-lib-console');
// jest.mock('@adobe/aio-lib-ims');
jest.mock('connector-registry-storage-adapter', () => jest.fn().mockImplementation(() => ({
    get: jest.fn().mockImplementation((name, version) => mockSources[`${version}-${name}`]),
    getList: jest.fn().mockImplementation(() => mockMetadataFixture)
})));

//const adapterMockGet = jest.spyOn(adapter, 'get')

// jest.mock('../../../../helpers', () => ({
//     promptMultiselect: jest.fn().mockResolvedValue(
//         Object.values(mockMetadataFixture).map((elem) => ({ name: elem.name, value: elem }))
//     ),
//     promptSelect: jest.fn().mockResolvedValue(
//         Object.keys(mockMetadataFixture).map(elem => `${elem.name}@${elem.latest}`)
//     ),
//     promptConfirm: jest.fn().mockResolvedValue({})
// }));
const GetCommand = require('../get');
let logSpy = null;
let errorLogSpy = null;
const mockConsoleCLIInstance = {};


const orgs = [{ id: '1234', code: 'CODE1234@AdobeOrg', name: 'ORG01', type: 'entp' }];
const selectedOrg = { id: '1234', code: 'CODE1234@AdobeOrg', name: 'ORG01', type: 'entp' };

const projects = [{ id: '5678', title: 'Project01' }];
const selectedProject = { id: '5678', title: 'Project01' };

const workspaces = [{ id: '123456789', title: 'Workspace01' }];
const selectedWorkspace = { id: '123456789', title: 'Workspace01' };
function setDefaultMockConsoleCLI() {
    mockConsoleCLIInstance.getToken = jest.fn().mockReturnValue('test_token');
    mockConsoleCLIInstance.getCliEnv = jest.fn().mockReturnValue('prod');

    mockConsoleCLIInstance.getOrganizations = jest.fn().mockResolvedValue(orgs);
    mockConsoleCLIInstance.promptForSelectOrganization = jest.fn().mockResolvedValue(selectedOrg);

    mockConsoleCLIInstance.getProjects = jest.fn().mockResolvedValue(projects);
    mockConsoleCLIInstance.promptForSelectProject = jest.fn().mockResolvedValue(selectedProject);

    mockConsoleCLIInstance.getWorkspaces = jest.fn().mockResolvedValue(workspaces);
    mockConsoleCLIInstance.promptForSelectWorkspace = jest.fn().mockResolvedValue(selectedWorkspace);
}
describe('source:get command tests', () => {
    beforeEach(() => {
        setDefaultMockConsoleCLI();
       

        logSpy = jest.spyOn(GetCommand.prototype, 'log');
        errorLogSpy = jest.spyOn(GetCommand.prototype, 'error');
    });
    // test('Check executing without parameters', async () => {
    //     const runResult = GetCommand.run([]);

    //     return runResult.catch(err => {
    //         expect(err).toHaveProperty(
    //             'message',
    //             expect.stringMatching(
    //                 `The "aio api-mesh:source:get" command require additional parameters` +
    //                 `\nUse "aio api-mesh:source:get --help" to see parameters information.`
    //             )
    //         );
    //     });
    // });
    test('Check executing without parameters 111', async () => {
        //const adapter = new Adapter()
        //const mockCallback = jest.fn(promptMultiselect);
        const result = await GetCommand.run([])
        expect(1).toEqual(1)
        //expect(adapter.getList).toHaveBeenCalled()
        //expect(mockCallback).toHaveBeenCalled()
        //expect(1).toEqual(1)
        //return
    });
});
